{"version":3,"sources":["data/courses.tsx","component/Utilities.tsx","data/progress.tsx","data/tests.tsx","component/MainNav/MainNav.tsx","component/Footer.tsx","page/Login.tsx","component/Inputs.tsx","page/Home/Home.tsx","component/ScoreMeter.tsx","page/Learn.tsx","page/Practice.tsx","page/Error.tsx","App/App.tsx","index.tsx"],"names":["ECourseType","storage","key","window","localStorage","getItem","ID","value","setItem","text","number","Math","floor","split","map","line","uuid","getIconByValue","faSmileBeam","faSmileWink","faSmile","faFrown","faSadTear","faQuestionCircle","getIconByType","type","Types","faFont","Operators","faWrench","Pointers","faHandPointLeft","Objects","faSitemap","Functions","faStream","Classes","faAddressCard","faCode","courses","id","category","name","title","description","sections","example","getCourses","PROGRESS","TESTS","getProgress","JSON","parse","getProgressSummery","progress","progressSummery","Object","keys","forEach","values","course","push","length","reduce","total","getProgressSummeryOverall","summery","sum","item","getTestsScores","tests","questions","question","options","answer","hint","getTests","MainNav","useState","show","setShow","tab","setTab","location","useLocation","renderLearnTab","out","listItems","filter","to","INDEX","className","renderPracticeTab","test","handleTabChange","newTab","pathname","icon","faGraduationCap","onClick","getTab","Footer","date","Date","style","gridRow","href","faGithub","getFullYear","Login","onLogin","inputName","setInputName","faUserCircle","size","onSubmit","event","preventDefault","displayName","charAt","toUpperCase","slice","toLowerCase","placeholder","onChange","currentTarget","getState","validation","Radio","checked","children","ProgressCircle","thickness","showValue","innerText","position","width","height","cx","cy","r","fill","stroke","transform","strokeWidth","strokeLinecap","strokeDasharray","strokeDashoffset","fontSize","top","left","Home","user","useContext","userContext","renderStats","testScore","find","getTestScore","renderPracticeCards","renderLearnCards","ICONS","ScoreMeter","courseId","index","data","stringify","updateScore","Learn","params","useParams","useEffect","SyntaxHighlighter","registerLanguage","csharp","highlightAll","Error","getCourseDetails","section","maxWidth","ERROR","Practice","username","param","testDetails","setTestDetails","setQuestions","setTestScore","setValidation","handleValidation","qIndex","oIndex","selected","console","log","getTestDetails","qs","score","updateScoreCategory","disabled","option","e","message","renderScore","navigator","useNavigate","VERSION","CONTENT","createContext","APP_VER","CONTENT_VER","USERNAME","App","setUser","findIndex","newProgress","initProgress","Provider","path","element","newUsername","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2738b0e.chunk.js","sourcesContent":["import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n   faAddressCard,\r\n   faCode,\r\n   faFont,\r\n   faHandPointLeft,\r\n   faSitemap,\r\n   faStream,\r\n   faWrench,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport enum ECourseType {\r\n   Types = 'Types',\r\n   Operators = 'Operators',\r\n   Pointers = 'Pointers',\r\n   Objects = 'Objects',\r\n   Functions = 'Functions',\r\n   Classes = 'Classes',\r\n   // WinForm = 'WinForm',\r\n}\r\n\r\nexport function getIconByType(type: ECourseType | string): IconProp {\r\n   switch (type) {\r\n      case ECourseType.Types:\r\n         return faFont;\r\n      case ECourseType.Operators:\r\n         return faWrench;\r\n      case ECourseType.Pointers:\r\n         return faHandPointLeft;\r\n      case ECourseType.Objects:\r\n         return faSitemap;\r\n      case ECourseType.Functions:\r\n         return faStream;\r\n      case ECourseType.Classes:\r\n         return faAddressCard;\r\n      // case ECourseType.WinForm:\r\n      //    return faWindowMaximize;\r\n      default:\r\n         return faCode;\r\n   }\r\n}\r\n\r\nexport interface ICourse {\r\n   id: string;\r\n   category: ECourseType;\r\n   name: string;\r\n}\r\n\r\nexport interface ICourseDetails extends ICourse {\r\n   title: string;\r\n   description: string;\r\n   sections: ICourseSection[];\r\n}\r\n\r\nexport interface ICourseSection {\r\n   title: string;\r\n   description: string;\r\n   example?: string;\r\n}\r\n\r\nconst courses: ICourseDetails[] = [\r\n   {\r\n      id: 'primitive-types',\r\n      category: ECourseType.Types,\r\n      name: 'Primitive types',\r\n      title: 'Primitive types overview',\r\n      description: `Primitive types are the most basic types.`,\r\n      sections: [\r\n         {\r\n            title: 'bool',\r\n            description: `bool(Boolean) is the smallest type, it has only 2 possible states: True or False.\r\n               Booleans are mainly used in comparison operations.`,\r\n            example: `// Declaration and usage\r\n   bool isOnline = true;\r\n\r\n   if (isOnline) {\r\n      Console.WriteLine(\"Connection established!\");\r\n   }`,\r\n         },\r\n         {\r\n            title: `int, float and double`,\r\n            description: `int(integer), float, and double are numerical types, they represent numbers.\r\n               Each one has it's use case, typically we want to use the smallest type possible.\r\n      \r\n               int is the smallest one, it can hold only whole numbers.\r\n               Mainly use for counting stuff, like days, age, number of objects, indexes, etc..\r\n      \r\n               float is in the middle, it can hold decimal numbers, it's much lighter than double but less accurate.\r\n               Mainly use for stuff that doesn't require great precision and simple math.\r\n               Input number MUST use one of this formats: 0f, 0.0f\r\n      \r\n               double is the largest one, it can hold decimal numbers, it's heavy but accurate.\r\n               Mainly use for stuff that requires great precision like balance and currency.`,\r\n            example: `// Declaration\r\n   int age = 30;\r\n   float distance = 450.562f;\r\n   double balance1 = 1115313.315134d; // the d at the end is optional`,\r\n         },\r\n         {\r\n            title: `char and string`,\r\n            description: `char and strings types used for representing letter or text.\r\n      \r\n               char can hold only 1 letter which make it the smaller one.\r\n               Mainly used for storing letters and symbols, useful when dealing with ASCII.\r\n               Input letter MUST use this format: 'x'\r\n               \r\n               string can hold from 1 letter to full sentences, it's much larger and it grow by the amount of text that it's storing.\r\n               Mainly used for text.\r\n               Input text MUST use this format: \"Text\"`,\r\n            example: `// Declaration\r\n   char theLetterB = 'B';\r\n   string message = \"Oh no we are out of milk!\";`,\r\n         },\r\n      ],\r\n   },\r\n   {\r\n      id: 'complex-types',\r\n      category: ECourseType.Types,\r\n      name: 'Complex types',\r\n      title: 'Complex types overview',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n   {\r\n      id: 'math-operators',\r\n      category: ECourseType.Operators,\r\n      name: 'Math operators',\r\n      title: 'Math operators overview',\r\n      description: `Math operators allow us to preform math operations.`,\r\n      sections: [\r\n         {\r\n            title: 'Basic math operators',\r\n            description: `Their soul purpose is to do basic math operations.`,\r\n            example: `// Usage\r\n   double result = 0;\r\n   \r\n   result = 5 + 10;\\t// result = 15\r\n   result = 5 - 10;\\t// result = -5\r\n   result = 5 * 10;\\t// result = 50\r\n   result = 5 / 10;\\t// result = 0.5\r\n   result = 5 % 10;\\t// result = 5`,\r\n         },\r\n         {\r\n            title: `Setter math operators`,\r\n            description: `Those operators work the same as the basic ones, the only different is that they use the variable value and then set the variable value to the result.\r\n            Essentially \"x += y\" is the same as \"x = x + y\".`,\r\n            example: `// Usage\r\n   double result = 10;\r\n   \r\n   result += 5;\\t\\t// result = 15\r\n   result -= 5;\\t\\t// result = 5\r\n   result *= 5;\\t\\t// result = 50\r\n   result /= 5;\\t\\t// result = 2\r\n   result %= 5;\\t\\t// result = 0`,\r\n         },\r\n         {\r\n            title: `Shortcut math operators`,\r\n            description: `There are shortcuts to save us some time and to help us with cleaner code.\r\n            The 2 main ones are \"++\" and \"--\" they are used to add or subtract 1 from from the givin variable and set its value to the result.\r\n            Essentially \"x++\" is the same as \"x = x + 1\".\r\n\r\n            In most cases we write them after the variable name like that: index++, in this case the returned value will be the original value before adding 1.\r\n            If we want to return the value after adding 1 we will write them before the variable name like that: ++index.\r\n            \r\n            Note: They will always add 1 even if the variable type is float or double.\r\n\r\n            Note: They can be chained but it's highly not recommended, you should use setter math operators instead.`,\r\n            example: `// Usage\r\n   int x = 0;\r\n   int result = 0;\r\n\r\n   result = x++\\t\\t// result = 0, x = 1\r\n   result = x--\\t\\t// result = 0, x = -1\r\n   result = ++x\\t\\t// result = 1, x = 1\r\n   result = --x\\t\\t// result = -1, x = -1\r\n   \r\n// Other types\r\n   double myDouble = 0.0\r\n   myDouble++\\t\\t// myDouble = 1.0\r\n\r\n   float myFloat = 0.0f\r\n   myFloat++\\t\\t// myFloat = 1.0f\r\n\r\n// Chaining\r\n   result = x++++\\t\\t// result = 0, x = 2, Use x+=2 instead!\r\n   result = ++++++x\\t\\t// result = 3, x = 3, Use x+=3 instead!`,\r\n         },\r\n      ],\r\n   },\r\n   {\r\n      id: 'condition-operators',\r\n      category: ECourseType.Operators,\r\n      name: 'Condition operators',\r\n      title: 'Condition operators overview',\r\n      description: `Condition operators test the values and return a bool.`,\r\n      sections: [\r\n         {\r\n            title: 'Basic condition operators',\r\n            description: `Those operators take 2 values and test them.\r\n            \r\n            \">\" and \"<\" Check if the value is greater than or less than.\r\n            \">=\" and \"<=\" Check if the value is greater than or less than or equal(same as \"==\").\r\n            \"==\" return true if both values are the same, else false.\r\n            \"!=\" return false if both values are the same, else true.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n// With numbers\r\n   result = 5 > 10;\\t\\t// result = false\r\n   result = 5 < 10;\\t\\t// result = true\r\n   result = 5 >= 10;\\t\\t// result = false\r\n   result = 5 <= 10;\\t\\t// result = true\r\n   result = 5 == 10;\\t\\t// result = false\r\n   result = 5 != 10;\\t\\t// result = true\r\n   \r\n// With text\r\n   result = \"Hello\" == \"World\";\\t// result = false\r\n   result = 'A' != 'B';\\t\\t// result = true`,\r\n         },\r\n         {\r\n            title: `&& operator`,\r\n            description: `The AND operator return true if BOTH conditions are true.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n   result = true && true;\\t// result = true\r\n   result = true && false;\\t// result = false\r\n   result = false && true;\\t// result = false\r\n   result = false && false;\\t// result = false`,\r\n         },\r\n         {\r\n            title: `|| operator`,\r\n            description: `The OR operator return true if ONE of the conditions is true.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n   result = true || true;\\t// result = true\r\n   result = true || false;\\t// result = true\r\n   result = false || true;\\t// result = true\r\n   result = false || false;\\t// result = false`,\r\n         },\r\n         {\r\n            title: `^^ operator`,\r\n            description: `The XOR operator return true if ONE of the conditions is true but NOT BOTH.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n   result = true ^^ true;\\t// result = true\r\n   result = true ^^ false;\\t// result = false\r\n   result = false ^^ true;\\t// result = false\r\n   result = false ^^ false;\\t// result = false`,\r\n         },\r\n         {\r\n            title: `! operator`,\r\n            description: `The NOT operator return true if the condition is false.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n   result = !true;\\t\\t// result = false\r\n   result = !false;\\t\\t// result = true`,\r\n         },\r\n      ],\r\n   },\r\n   {\r\n      id: 'basic-pointers',\r\n      category: ECourseType.Pointers,\r\n      name: 'Basic poiners',\r\n      title: 'Basic poiners overview',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n   {\r\n      id: 'pointer-to-pointer',\r\n      category: ECourseType.Pointers,\r\n      name: 'Pointer to Pointer',\r\n      title: 'Pointer to Pointer',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n   {\r\n      id: 'objects-overview',\r\n      category: ECourseType.Objects,\r\n      name: 'Objects overview',\r\n      title: 'Objects overview',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n   {\r\n      id: 'objects-inheritance',\r\n      category: ECourseType.Objects,\r\n      name: 'Object inheritance',\r\n      title: 'Object inheritance',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n   {\r\n      id: 'functions-overview',\r\n      category: ECourseType.Functions,\r\n      name: 'Functions overview',\r\n      title: 'Functions overview',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n   {\r\n      id: 'recursive-functions',\r\n      category: ECourseType.Functions,\r\n      name: 'Recursive functions',\r\n      title: 'Recursive functions',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n   {\r\n      id: 'classes-overview',\r\n      category: ECourseType.Classes,\r\n      name: 'Classes overview',\r\n      title: 'Classes overview',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n   {\r\n      id: 'class-inheritance',\r\n      category: ECourseType.Classes,\r\n      name: 'Class inheritance',\r\n      title: 'Class inheritance',\r\n      description: `This course is under construction.`,\r\n      sections: [],\r\n   },\r\n];\r\n\r\nexport function getCourses(): ICourse[] {\r\n   return courses;\r\n}\r\n\r\nexport function getCourse(id: string): ICourse {\r\n   const course = courses.find((course: ICourse) => {\r\n      return course.id === id;\r\n   });\r\n\r\n   if (course) {\r\n      return course;\r\n   } else {\r\n      throw new Error(`Invalid course requested id: '${id}'.`);\r\n   }\r\n}\r\n\r\nexport function getCourseDetails(id: string): ICourseDetails {\r\n   const course = courses.find((course: ICourse) => {\r\n      return course.id === id;\r\n   });\r\n\r\n   if (course) {\r\n      return course;\r\n   } else {\r\n      throw new Error(`Invalid course requested id: '${id}'.`);\r\n   }\r\n}\r\n","import React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n   faSmileBeam,\r\n   faSmileWink,\r\n   faSmile,\r\n   faFrown,\r\n   faSadTear,\r\n   faQuestionCircle,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { ID } from '../App';\r\n\r\nexport const storage = {\r\n   get: function (key: string): string {\r\n      return window.localStorage.getItem(ID + '.' + key) || '';\r\n   },\r\n   set: function (key: string, value: string): void {\r\n      window.localStorage.setItem(ID + '.' + key, value);\r\n   },\r\n};\r\n\r\nexport const text = {\r\n   toPercentage: function (number: number) {\r\n      return Math.floor(number * 100) + '%';\r\n   },\r\n   toParagraph: function (text: string): React.ReactElement[] {\r\n      const lines = text.split('\\n');\r\n      return lines.map((line) => {\r\n         return (\r\n            <span key={uuid()}>\r\n               {line}\r\n               <br />\r\n            </span>\r\n         );\r\n      });\r\n   },\r\n};\r\n\r\nexport function getIconByValue(value: number): IconProp {\r\n   if (value >= 0.8) {\r\n      return faSmileBeam;\r\n   } else if (value == 0.69) {\r\n      return faSmileWink;\r\n   } else if (value >= 0.6) {\r\n      return faSmile;\r\n   } else if (value >= 0.4) {\r\n      return faFrown;\r\n   } else if (value > 0) {\r\n      return faSadTear;\r\n   }\r\n   return faQuestionCircle;\r\n}\r\n","import { storage } from '../component/Utilities';\r\n\r\nimport { ECourseType, getCourses, ICourse } from './courses';\r\n\r\n// Local storage entries\r\nconst PROGRESS = 'progress';\r\nconst TESTS = 'tests';\r\n\r\nexport interface IProgress extends ICourse {\r\n   value: number;\r\n}\r\n\r\nexport function getProgress(): IProgress[] {\r\n   return JSON.parse(storage.get(PROGRESS) || '[]');\r\n}\r\n\r\nexport function initProgress(): void {\r\n   const progress: IProgress[] = getProgress();\r\n   if (progress.length) {\r\n      const courses = getCourses().map((course: ICourse) => {\r\n         const result = progress.findIndex((data: IProgress) => {\r\n            return data.id === course.id;\r\n         });\r\n         if (result === -1) {\r\n            return {\r\n               id: course.id,\r\n               category: course.category,\r\n               name: course.name,\r\n               value: 0,\r\n            };\r\n         }\r\n      });\r\n\r\n      const newProgress = [...progress, ...courses];\r\n      storage.set(PROGRESS, JSON.stringify(newProgress));\r\n   } else {\r\n      const newProgress = getCourses().map((course: ICourse) => {\r\n         return {\r\n            id: course.id,\r\n            category: course.category,\r\n            name: course.name,\r\n            value: 0,\r\n         };\r\n      });\r\n      storage.set(PROGRESS, JSON.stringify(newProgress));\r\n   }\r\n}\r\n\r\nexport function updateScore(id: string, value: number): void {\r\n   const progress = getProgress().map((data) => {\r\n      if (data.id === id) {\r\n         data.value = value;\r\n      }\r\n      return data;\r\n   });\r\n   storage.set(PROGRESS, JSON.stringify(progress));\r\n}\r\n\r\nexport function updateScoreCategory(\r\n   category: ECourseType,\r\n   value: number,\r\n): void {\r\n   const progress = getProgress().map((data) => {\r\n      if (data.category === category) {\r\n         data.value = value;\r\n      }\r\n      return data;\r\n   });\r\n   storage.set(PROGRESS, JSON.stringify(progress));\r\n}\r\n\r\nexport interface IProgressSummery {\r\n   category: string;\r\n   value: number;\r\n}\r\n\r\nexport function getProgressSummery(): IProgressSummery[] {\r\n   const progress = getProgress();\r\n   const progressSummery: IProgressSummery[] = [];\r\n\r\n   Object.keys(ECourseType).forEach((type) => {\r\n      const values: number[] = [];\r\n\r\n      progress.forEach((course) => {\r\n         if (course.category === type) {\r\n            values.push(course.value);\r\n         }\r\n      });\r\n\r\n      let value = 0;\r\n      if (values.length) {\r\n         value = values.reduce((total, value) => total + value) / values.length;\r\n      }\r\n      progressSummery.push({ category: type, value: value });\r\n   });\r\n\r\n   return progressSummery;\r\n}\r\n\r\nexport function getProgressSummeryOverall(): number {\r\n   const summery = getProgressSummery();\r\n   let sum = 0;\r\n   summery.forEach((item: IProgressSummery) => {\r\n      sum += item.value;\r\n   });\r\n   return sum / summery.length;\r\n}\r\n\r\nexport interface ITestScore extends ICourse {\r\n   value: number;\r\n   best: number;\r\n   last: number;\r\n}\r\n\r\nexport function getTestsScores(): ITestScore[] {\r\n   return JSON.parse(storage.get(TESTS) || '[]');\r\n}\r\n\r\nexport function getTestScore(id: string): ITestScore | undefined {\r\n   const test = getTestsScores().find((test) => {\r\n      return test.id === id;\r\n   });\r\n   if (test) {\r\n      return test;\r\n   }\r\n   return undefined;\r\n}\r\n\r\nexport function updateTestScore(id: string, value: number): void {\r\n   const tests = getTestsScores().map((data) => {\r\n      if (data.id === id) {\r\n         data.last = data.value;\r\n         data.value = value;\r\n         if (data.best < value) {\r\n            data.best = value;\r\n         }\r\n      }\r\n      return data;\r\n   });\r\n   storage.set(TESTS, JSON.stringify(tests));\r\n}\r\n","import { ECourseType, ICourse } from './courses';\r\n\r\nexport interface ITestDetails extends ICourse {\r\n   title: string;\r\n   description: string;\r\n   questions: ITestQuestion[];\r\n}\r\n\r\nexport interface ITestQuestion {\r\n   question: string;\r\n   description: string;\r\n   options: string[];\r\n   hint?: string;\r\n   answer: number;\r\n}\r\n\r\nconst tests: ITestDetails[] = [\r\n   {\r\n      id: 'types-test',\r\n      category: ECourseType.Types,\r\n      name: 'Types',\r\n      title: 'Types declaration and usage',\r\n      description: 'This test focus on types declaration and usage.',\r\n      questions: [\r\n         {\r\n            question:\r\n               'Which variable declaration is most suited for counting whole apples?',\r\n            description: '',\r\n            options: [\r\n               'double apples = 3;',\r\n               'apples = 3;',\r\n               'int apples = 3;',\r\n               'apples = 3.0;',\r\n            ],\r\n            answer: 2,\r\n            hint: 'We want to declare a variable that store whole numbers.',\r\n         },\r\n         {\r\n            question:\r\n               'Which variable declaration is most suited for an account balance?',\r\n            description: '',\r\n            options: [\r\n               'balance = 32,163.51;',\r\n               'int balance = 32,163.51;',\r\n               'float balance = 32,163.51;',\r\n               'double balance = 32,163.51;',\r\n            ],\r\n            answer: 3,\r\n            hint: 'We want to declare a variable that can hold large decimal numbers.',\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type int?',\r\n            description: '',\r\n            options: [\r\n               'int dogs = 2;',\r\n               'int dogs = 2i;',\r\n               'int dogs = 2f;',\r\n               'int dogs = 2d;',\r\n            ],\r\n            answer: 0,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type float?',\r\n            description: '',\r\n            options: [\r\n               'float lengthInMeters = 2.0;',\r\n               'float lengthInMeters = 2.0i;',\r\n               'float lengthInMeters = 2.0f;',\r\n               'float lengthInMeters = 2.0d;',\r\n            ],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type double?',\r\n            description: '',\r\n            options: [\r\n               \"double coinValue = '0.00005649';\",\r\n               'double coinValue = 0.00005649i;',\r\n               'double coinValue = 0.00005649f;',\r\n               'double coinValue = 0.00005649d;',\r\n            ],\r\n            answer: 3,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type char?',\r\n            description: '',\r\n            options: [\r\n               'char letter = A;',\r\n               'char letter = \"A\";',\r\n               \"char letter = 'A';\",\r\n               'char letter = `A`;',\r\n            ],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type string?',\r\n            description: '',\r\n            options: [\r\n               'string msg = Hello world!;',\r\n               'string msg = \"Hello world!\";',\r\n               \"string msg = 'Hello world!';\",\r\n               'string msg = `Hello world!`;',\r\n            ],\r\n            answer: 1,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is incorrect?',\r\n            description: '',\r\n            options: [\r\n               'string greeting = \"Welcome!\";',\r\n               \"char grade = 'C';\",\r\n               'int flightNumber = 526EB01;',\r\n               'double pie = 3.14;',\r\n            ],\r\n            answer: 2,\r\n            hint: 'Look at the values.',\r\n         },\r\n      ],\r\n   },\r\n   {\r\n      id: 'operators-test',\r\n      category: ECourseType.Operators,\r\n      name: 'Operators',\r\n      title: 'Operators usage',\r\n      description: 'This test focus on math and condition operators.',\r\n      questions: [\r\n         {\r\n            question:\r\n               'Which statement will result in \"x = y + 1\" AND \"y = y + 1\"?',\r\n            description: '',\r\n            options: [\r\n               'double x = y;',\r\n               'double x = y + 1;',\r\n               'double x = y++;',\r\n               'double x = ++y;',\r\n            ],\r\n            answer: 3,\r\n            hint: 'We want to increase \"y\" by 1 and pass it to \"x\".',\r\n         },\r\n         {\r\n            question:\r\n               'Which statement will NOT give us the message \"Hello world\"?',\r\n            description: '',\r\n            options: [\r\n               'Console.WriteLine(\"Hello world\");',\r\n               'Console.WriteLine(\"Hello \" + \"world\");',\r\n               'Console.WriteLine(\"Hello\" + \" world\");',\r\n               'Console.WriteLine(\"Hello\" + \"world\");',\r\n            ],\r\n            answer: 3,\r\n            hint: 'Pay attention to the spaces.',\r\n         },\r\n         {\r\n            question: 'Which condition is true?',\r\n            description: '',\r\n            options: [\r\n               'true != true',\r\n               'true == false',\r\n               'true != !true',\r\n               'false == !false',\r\n            ],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question: 'Which condition is true?',\r\n            description: '',\r\n            options: [\r\n               '(10 > 10) && (10 < 10)',\r\n               '(10 > 10) || (10 < 10)',\r\n               '(10 >= 10) == (10 <= 10)',\r\n               '(10 >= 10) != (10 <= 10)',\r\n            ],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question: 'Which condition is true?',\r\n            description: '',\r\n            options: [\r\n               '(!true) && (10 < 10)',\r\n               '(10 > 10) || (!false)',\r\n               '(!true) == (10 <= 10)',\r\n               '(10 >= 10) != (!true)',\r\n            ],\r\n            answer: 1,\r\n         },\r\n         {\r\n            question: 'Which condition is true?',\r\n            description: '',\r\n            options: [\r\n               'true && false && true && false',\r\n               'true || false || true || false',\r\n               'true == false == true == false',\r\n               'true == false != true == false',\r\n            ],\r\n            answer: 1,\r\n         },\r\n         {\r\n            question: 'Which condition is true?',\r\n            description: '',\r\n            options: [\r\n               '(true != true) && (true == false)',\r\n               '(true != true) || (true == false)',\r\n               '(true != true) == (true == false)',\r\n               '(true != true) != (true == false)',\r\n            ],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question: 'Which condition is false?',\r\n            description: '',\r\n            options: [\r\n               '(true == true) && (true != false)',\r\n               '(true != true) || (true != false)',\r\n               '(!true != true) == (true == !false)',\r\n               '(true == true) != (true == !false)',\r\n            ],\r\n            answer: 3,\r\n         },\r\n         {\r\n            question: 'Which condition is false?',\r\n            description: '',\r\n            options: [\r\n               '(true ^^ !true) && (true == !false)',\r\n               '(true == !true) || (true && !false)',\r\n               '(true && !true) ^^ (true || !false)',\r\n               '(true || !true) == (true ^^ !false)',\r\n            ],\r\n            answer: 3,\r\n         },\r\n         {\r\n            question: 'Which condition is false?',\r\n            description: '',\r\n            options: [\r\n               '(true || true) && !(true || true)',\r\n               '!(true ^^ true) || (true ^^ false)',\r\n               '(true && true) ^^ !(true || false)',\r\n               '!(true || true) == (true && false)',\r\n            ],\r\n            answer: 0,\r\n         },\r\n      ],\r\n   },\r\n];\r\n\r\nexport function getTests(): ICourse[] {\r\n   return tests;\r\n}\r\n\r\nexport function getTest(id: string): ICourse {\r\n   const course = tests.find((test: ICourse) => {\r\n      return test.id === id;\r\n   });\r\n\r\n   if (course) {\r\n      return course;\r\n   } else {\r\n      throw new Error(`Invalid test requested id: '${id}'.`);\r\n   }\r\n}\r\n\r\nexport function getTestDetails(id: string): ITestDetails {\r\n   const test = tests.find((test: ICourse) => {\r\n      return test.id === id;\r\n   });\r\n\r\n   if (test) {\r\n      return test;\r\n   } else {\r\n      throw new Error(`Invalid test requested id: '${id}'.`);\r\n   }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGraduationCap } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { ECourseType, getCourses, ICourse } from '../../data/courses';\r\nimport { getTests } from '../../data/tests';\r\n\r\nimport { INDEX } from '../../App';\r\n\r\nimport './MainNav.css';\r\n\r\nfunction MainNav(): React.ReactElement {\r\n   const [show, setShow] = useState(false);\r\n   const [tab, setTab] = useState(-1);\r\n   const location = useLocation();\r\n\r\n   function renderLearnTab() {\r\n      const out: React.ReactElement[] = [];\r\n      const courses = getCourses();\r\n\r\n      Object.keys(ECourseType).forEach((type) => {\r\n         const listItems: React.ReactElement[] = [];\r\n         const filtered = courses.filter((course: ICourse) => {\r\n            return course.category === type;\r\n         });\r\n\r\n         filtered.forEach((course: ICourse) => {\r\n            listItems.push(\r\n               <li key={uuid()}>\r\n                  <Link to={INDEX + '/learn/' + course.id}>{course.name}</Link>\r\n               </li>,\r\n            );\r\n         });\r\n\r\n         out.push(\r\n            <div key={uuid()}>\r\n               <h5>{type}</h5>\r\n               <ul className=\"list-unstyled\">{listItems}</ul>\r\n            </div>,\r\n         );\r\n      });\r\n\r\n      return out;\r\n   }\r\n\r\n   function renderPracticeTab() {\r\n      const out: React.ReactElement[] = [];\r\n      const tests = getTests();\r\n\r\n      Object.keys(ECourseType).forEach((type) => {\r\n         const listItems: React.ReactElement[] = [];\r\n         const filtered = tests.filter((test: ICourse) => {\r\n            return test.category === type;\r\n         });\r\n\r\n         filtered.forEach((test: ICourse) => {\r\n            listItems.push(\r\n               <li key={uuid()}>\r\n                  <Link to={INDEX + '/practice/' + test.id}>{test.name}</Link>\r\n               </li>,\r\n            );\r\n         });\r\n\r\n         out.push(\r\n            <div key={uuid()}>\r\n               <h5>{type}</h5>\r\n               <ul className=\"list-unstyled\">{listItems}</ul>\r\n            </div>,\r\n         );\r\n      });\r\n\r\n      return out;\r\n   }\r\n\r\n   function getTab(): React.ReactElement {\r\n      switch (tab) {\r\n         case 0:\r\n            return <div className=\"drop-list\">{renderLearnTab()}</div>;\r\n         case 1:\r\n            return <div className=\"drop-list\">{renderPracticeTab()}</div>;\r\n         default:\r\n            return <div></div>;\r\n      }\r\n   }\r\n\r\n   function handleTabChange(newTab: number) {\r\n      if (tab != newTab) {\r\n         setTab(newTab);\r\n         setShow(true);\r\n      } else {\r\n         setShow(!show);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <nav\r\n         className={`main-nav disable-select ${show ? 'show bg-normal' : ''} ${\r\n            location.pathname !== INDEX ? 'bg-normal' : ''\r\n         }`}\r\n      >\r\n         <div className=\"container\">\r\n            <nav className=\"nav-items\">\r\n               <Link to={INDEX}>\r\n                  <h4 className=\"title\">\r\n                     <FontAwesomeIcon icon={faGraduationCap} /> Homework\r\n                     <sup> .NET</sup>\r\n                  </h4>\r\n               </Link>\r\n               <a onClick={() => handleTabChange(0)}>Learn</a>\r\n               <a onClick={() => handleTabChange(1)}>Practice</a>\r\n            </nav>\r\n            <nav className=\"nav-details\">{getTab()}</nav>\r\n         </div>\r\n      </nav>\r\n   );\r\n}\r\n\r\nexport default MainNav;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction Footer(): React.ReactElement {\r\n   const date = new Date();\r\n   return (\r\n      <footer\r\n         className=\"bg-normal color-dark disable-select\"\r\n         style={{ gridRow: 99 }}\r\n      >\r\n         <div className=\"container\">\r\n            <div className=\"footer p-1\">\r\n               <span>\r\n                  <small>\r\n                     <a href=\"https://github.com/StrykeDev\">\r\n                        StrykeDev <FontAwesomeIcon icon={faGithub} /> GitHub\r\n                     </a>\r\n                     {' | '}\r\n                     <a href=\"mailto:attias.barak@gmail.com\">\r\n                        attias.barak@gmail.com\r\n                     </a>\r\n                  </small>\r\n               </span>\r\n               <small>\r\n                  Barak Attias {date.getFullYear()} &copy; Made In Israel\r\n               </small>\r\n            </div>\r\n         </div>\r\n      </footer>\r\n   );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface ILoginProps {\r\n   onLogin: (username: string) => void;\r\n}\r\n\r\nfunction Login({ onLogin }: ILoginProps): React.ReactElement {\r\n   const [inputName, setInputName] = useState('');\r\n\r\n   function handleRegister(event: React.FormEvent): void {\r\n      event.preventDefault();\r\n\r\n      if (inputName) {\r\n         const name = inputName.split(' ')[0];\r\n         const displayName =\r\n            name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\r\n         onLogin(displayName);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div className=\"my-4 text-center\">\r\n         <div className=\"mb-2\">\r\n            <h1>\r\n               Welcome to <span className=\"title\">Homework</span>!\r\n            </h1>\r\n            <h3>Lets get started.</h3>\r\n         </div>\r\n         <div className=\"dialog bg-normal rounded\">\r\n            <div className=\"p-1\">\r\n               <FontAwesomeIcon icon={faUserCircle} size=\"10x\" />\r\n               <form onSubmit={handleRegister} className=\"mt-1\">\r\n                  <input\r\n                     type=\"text\"\r\n                     placeholder=\"What are we going to call you?\"\r\n                     value={inputName}\r\n                     onChange={(event) =>\r\n                        setInputName(event.currentTarget.value)\r\n                     }\r\n                  />\r\n                  <input className=\"btn\" type=\"submit\" value=\"Start learning\" />\r\n               </form>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nimport { text } from './Utilities';\r\n\r\ninterface IInput {\r\n   name: string;\r\n   value: number;\r\n   onChange: (event: any) => void;\r\n   children: React.ReactElement | string;\r\n   validation?: boolean | undefined;\r\n}\r\n\r\ninterface IInputRadio extends IInput {\r\n   checked: boolean;\r\n}\r\n\r\nfunction getState(className: string, validation: boolean | undefined): string {\r\n   switch (validation) {\r\n      case true:\r\n         return className + ' valid';\r\n      case false:\r\n         return className + ' invalid';\r\n      default:\r\n         return className;\r\n   }\r\n}\r\n\r\nexport function Radio({\r\n   name,\r\n   checked,\r\n   children,\r\n   value,\r\n   validation,\r\n   onChange,\r\n}: IInputRadio): React.ReactElement {\r\n   return (\r\n      <label className=\"radio-wrapper\">\r\n         <input\r\n            type=\"radio\"\r\n            name={name}\r\n            checked={checked}\r\n            value={value}\r\n            onChange={onChange}\r\n         />\r\n         <span className={getState('radio', validation)} />\r\n         {children}\r\n      </label>\r\n   );\r\n}\r\n\r\ninterface IProgress {\r\n   value: number;\r\n   size?: number;\r\n   thickness?: number;\r\n   showValue?: boolean;\r\n   innerText?: string;\r\n}\r\n\r\nexport function ProgressCircle({\r\n   value,\r\n   size = 48,\r\n   thickness = 16,\r\n   showValue = true,\r\n   innerText = '',\r\n}: IProgress): React.ReactElement {\r\n   return (\r\n      <div\r\n         style={{\r\n            position: 'relative',\r\n            width: size * 2,\r\n            height: size * 2,\r\n         }}\r\n      >\r\n         <svg style={{ height: '100%', width: '100%' }}>\r\n            <circle\r\n               cx={size - thickness / 2}\r\n               cy={size - thickness / 2}\r\n               r={size - thickness / 2}\r\n               style={{\r\n                  fill: 'none',\r\n                  stroke: 'var(--btn-normal)',\r\n                  transform: `translate(${thickness / 2}px,${thickness / 2}px)`,\r\n                  strokeWidth: thickness,\r\n               }}\r\n            />\r\n            <circle\r\n               cx={size - thickness / 2}\r\n               cy={size - thickness / 2}\r\n               r={size - thickness / 2}\r\n               style={{\r\n                  fill: 'none',\r\n                  stroke: 'var(--accent-color)',\r\n                  transform: `translate(${thickness / 2}px,${thickness / 2}px)`,\r\n                  strokeWidth: thickness,\r\n                  strokeLinecap: 'round',\r\n                  strokeDasharray: size * 5.37,\r\n                  strokeDashoffset: `calc(${size * 5.37} - (${size * 5.37} * ${\r\n                     value * 100\r\n                  }) / 100)`,\r\n               }}\r\n            />\r\n         </svg>\r\n         <div\r\n            className=\"d-flex flex-column align-items-center justify-content-center\"\r\n            style={{\r\n               fontSize: thickness,\r\n               position: 'absolute',\r\n               height: '100%',\r\n               width: '100%',\r\n               top: 0,\r\n               left: 0,\r\n            }}\r\n         >\r\n            <h6 className={innerText ? '' : 'collapse'}>{innerText}</h6>\r\n            <span className={showValue ? '' : 'collapse'}>\r\n               {text.toPercentage(value)}\r\n            </span>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { getIconByValue } from '../../component/Utilities';\r\nimport { ProgressCircle } from '../../component/Inputs';\r\n\r\nimport {\r\n   ECourseType,\r\n   getCourses,\r\n   getIconByType,\r\n   ICourse,\r\n} from '../../data/courses';\r\nimport { getTests } from '../../data/tests';\r\nimport {\r\n   getProgressSummery,\r\n   getProgressSummeryOverall,\r\n   getTestScore,\r\n   IProgressSummery,\r\n} from '../../data/progress';\r\n\r\nimport { INDEX, userContext } from '../../App';\r\n\r\nimport './Home.css';\r\n\r\nfunction Home(): React.ReactElement {\r\n   const user = useContext(userContext);\r\n\r\n   function renderStats(): React.ReactElement[] {\r\n      const out = getProgressSummery().map((item: IProgressSummery) => {\r\n         return (\r\n            <div key={uuid()} className=\"progress-card\">\r\n               <h5>{item.category}</h5>\r\n               <ProgressCircle value={item.value} />\r\n            </div>\r\n         );\r\n      });\r\n\r\n      while (out.length % 3) {\r\n         out.push(\r\n            <div key={uuid()} className=\"progress-card\">\r\n               <h5 className=\"hide\">...</h5>\r\n               <ProgressCircle value={0} />\r\n            </div>,\r\n         );\r\n      }\r\n\r\n      return out;\r\n   }\r\n\r\n   function renderLearnCards(): React.ReactElement[] {\r\n      const out: React.ReactElement[] = [];\r\n      const courses = getCourses();\r\n\r\n      Object.keys(ECourseType).forEach((type: string) => {\r\n         const listItems: React.ReactElement[] = [];\r\n         const filtered = courses.filter((course: ICourse) => {\r\n            return course.category === type;\r\n         });\r\n\r\n         filtered.forEach((course: ICourse) => {\r\n            listItems.push(\r\n               <li key={uuid()}>\r\n                  <Link to={INDEX + '/learn/' + course.id}>{course.name}</Link>\r\n               </li>,\r\n            );\r\n         });\r\n\r\n         out.push(\r\n            <div key={uuid()} className=\"bg-normal rounded p-1\">\r\n               <h5 className=\"d-flex justify-content-between\">\r\n                  {type}\r\n                  <FontAwesomeIcon icon={getIconByType(type)} />\r\n               </h5>\r\n               <ul className=\"list-unstyled\">{listItems}</ul>\r\n            </div>,\r\n         );\r\n      });\r\n\r\n      while (out.length % 6) {\r\n         out.push(\r\n            <div key={uuid()} className=\"bg-normal rounded p-1\">\r\n               <h5 className=\"d-flex justify-content-between hide\">...</h5>\r\n               <ul className=\"list-unstyled hide\">...</ul>\r\n            </div>,\r\n         );\r\n      }\r\n\r\n      return out;\r\n   }\r\n\r\n   function renderPracticeCards(): React.ReactElement[] {\r\n      const out: React.ReactElement[] = [];\r\n      const tests = getTests();\r\n\r\n      tests.forEach((test) => {\r\n         const testScore = getTestScore(test.id);\r\n         out.push(\r\n            <Link\r\n               key={uuid()}\r\n               className=\"btn bg-normal m-0 p-1 d-flex align-items-center justify-content-between\"\r\n               to={INDEX + '/practice/' + test.id}\r\n            >\r\n               <span>\r\n                  <h5>{test.category}</h5>\r\n                  <p>{test.name}</p>\r\n               </span>\r\n               <FontAwesomeIcon\r\n                  icon={getIconByValue(testScore?.value || 0)}\r\n                  size=\"3x\"\r\n               />\r\n            </Link>,\r\n         );\r\n      });\r\n\r\n      while (out.length % 6) {\r\n         out.push(\r\n            <a\r\n               key={uuid()}\r\n               className=\"btn bg-normal color-dark m-0 p-1 d-flex align-items-center justify-content-between\"\r\n            >\r\n               <span className=\"hide\">\r\n                  <h5>...</h5>\r\n                  <p>...</p>\r\n               </span>\r\n               <FontAwesomeIcon icon={getIconByValue(0)} size=\"3x\" />\r\n            </a>,\r\n         );\r\n      }\r\n\r\n      return out;\r\n   }\r\n\r\n   return (\r\n      <div className=\"container\">\r\n         <div className=\"p-1\">\r\n            <header className=\"home-header\">\r\n               <div>\r\n                  <div className=\"my-4\">\r\n                     <h1>Hi {user}!</h1>\r\n                     <h4>What are we learning today?</h4>\r\n                  </div>\r\n                  <div className=\"progress-deck\">{renderStats()}</div>\r\n               </div>\r\n\r\n               <div className=\"progress-overview\">\r\n                  <div className=\"circle bg-light\">\r\n                     <ProgressCircle\r\n                        value={getProgressSummeryOverall()}\r\n                        size={275}\r\n                        thickness={16 * 5}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </header>\r\n            <hr className=\"hide\" />\r\n            <section>\r\n               <h3 className=\"text-center my-1\">Practice</h3>\r\n               <div className=\"practice-deck\">{renderPracticeCards()}</div>\r\n            </section>\r\n            <hr className=\"hide\" />\r\n            <section>\r\n               <h3 className=\"text-center my-1\">Learn</h3>\r\n               <div className=\"learn-deck\">{renderLearnCards()}</div>\r\n            </section>\r\n            <hr className=\"hide\" />\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n   faSadTear,\r\n   faFrown,\r\n   faSmile,\r\n   faSmileBeam,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { updateScore } from '../data/progress';\r\n\r\nconst ICONS = [faSadTear, faFrown, faSmile, faSmileBeam];\r\n\r\ninterface IScoreMeterProps {\r\n   courseId: string;\r\n}\r\n\r\nfunction ScoreMeter({ courseId }: IScoreMeterProps): React.ReactElement {\r\n   function renderButtons(): React.ReactElement[] {\r\n      const buttons = ICONS.map((icon: IconProp, index: number) => {\r\n         return (\r\n            <button\r\n               key={uuid()}\r\n               onClick={() => handleScoreSelected((index + 1) / ICONS.length)}\r\n            >\r\n               <FontAwesomeIcon icon={icon} size=\"3x\" />\r\n            </button>\r\n         );\r\n      });\r\n      return buttons;\r\n   }\r\n\r\n   function handleScoreSelected(value: number): void {\r\n      if (value >= 0 && value <= 1) {\r\n         updateScore(courseId, value);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div className=\"text-center\">\r\n         <h4>How are we doing?</h4>\r\n         <fieldset>{renderButtons()}</fieldset>\r\n         <p className=\"color-dark py-1\">\r\n            Select how you feel about this subject to track your progress.\r\n            <br />\r\n            <small>\r\n               The score will be set again after completing a test on this\r\n               subject.\r\n            </small>\r\n         </p>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default ScoreMeter;\r\n","import React, { useEffect } from 'react';\r\nimport { Navigate, useParams } from 'react-router';\r\nimport { v4 as uuid } from 'uuid';\r\nimport SyntaxHighlighter from 'highlight.js/lib/core';\r\nimport csharp from 'highlight.js/lib/languages/csharp';\r\nimport 'highlight.js/styles/github.css';\r\n\r\nimport { getCourseDetails, ICourseSection } from '../data/courses';\r\n\r\nimport ScoreMeter from '../component/ScoreMeter';\r\nimport { text } from '../component/Utilities';\r\n\r\nimport { ERROR } from '../App/App';\r\n\r\nfunction Learn(): React.ReactElement {\r\n   const params = useParams();\r\n\r\n   useEffect(() => {\r\n      SyntaxHighlighter.registerLanguage('cs', csharp);\r\n      SyntaxHighlighter.highlightAll();\r\n   }, [params]);\r\n\r\n   if (params.id) {\r\n      const course = getCourseDetails(params.id);\r\n      if (course) {\r\n         return (\r\n            <div className=\"container\">\r\n               <article className=\"p-1\">\r\n                  <h2>{course.title}</h2>\r\n                  <p>{text.toParagraph(course.description)}</p>\r\n                  {course.sections.map((section: ICourseSection) => {\r\n                     return (\r\n                        <section key={uuid()}>\r\n                           <hr />\r\n                           <h3>{section.title}</h3>\r\n                           <p>{text.toParagraph(section.description)}</p>\r\n\r\n                           {section.example ? (\r\n                              <pre\r\n                                 className=\"language-cs\"\r\n                                 style={{ maxWidth: '95vw' }}\r\n                              >\r\n                                 <code className=\"bg-white color-black rounded\">\r\n                                    {section.example}\r\n                                 </code>\r\n                              </pre>\r\n                           ) : (\r\n                              ''\r\n                           )}\r\n                        </section>\r\n                     );\r\n                  })}\r\n\r\n                  <hr />\r\n                  <ScoreMeter courseId={course.id} />\r\n                  <hr className=\"hide\" />\r\n               </article>\r\n            </div>\r\n         );\r\n      }\r\n   }\r\n   return <Navigate to={ERROR} />;\r\n}\r\n\r\nexport default Learn;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n   faSadTear,\r\n   faFrown,\r\n   faSmile,\r\n   faSmileWink,\r\n   faSmileBeam,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { text } from '../component/Utilities';\r\n\r\nimport { ITestQuestion, getTestDetails, ITestDetails } from '../data/tests';\r\nimport { updateScore, updateScoreCategory } from '../data/progress';\r\n\r\nimport { ERROR, userContext } from '../App/App';\r\nimport { Radio } from '../component/Inputs';\r\n\r\ninterface IQuestion {\r\n   selected: number;\r\n   answer: number;\r\n}\r\n\r\nfunction Practice(): React.ReactElement {\r\n   const username = useContext(userContext);\r\n   const param = useParams();\r\n   const [testDetails, setTestDetails] = useState<ITestDetails>();\r\n   const [questions, setQuestions] = useState<IQuestion[]>([]);\r\n   const [testScore, setTestScore] = useState(-1);\r\n   const [validation, setValidation] = useState(false);\r\n\r\n   useEffect((): void => {\r\n      console.log('checking params');\r\n\r\n      if (param.id) {\r\n         const test = getTestDetails(param.id);\r\n\r\n         if (test) {\r\n            const qs: IQuestion[] = [];\r\n            test.questions.forEach((question: ITestQuestion) => {\r\n               qs.push({\r\n                  selected: -1,\r\n                  answer: question.answer,\r\n               });\r\n            });\r\n\r\n            setTestDetails(test);\r\n            setQuestions(qs);\r\n         }\r\n      }\r\n   }, [param]);\r\n\r\n   function handleFormSubmit(event: any): void {\r\n      event.preventDefault();\r\n\r\n      let score = 0;\r\n      questions.forEach((question) => {\r\n         if (question.selected == question.answer) {\r\n            score++;\r\n         }\r\n      });\r\n\r\n      score /= questions.length;\r\n      setTestScore(score);\r\n\r\n      if (score > 0 && testDetails) {\r\n         updateScoreCategory(testDetails.category, score);\r\n      }\r\n\r\n      setValidation(true);\r\n   }\r\n\r\n   function handleValidation(\r\n      qIndex: number,\r\n      oIndex: number,\r\n   ): boolean | undefined {\r\n      if (validation) {\r\n         if (questions[qIndex].selected == -1) {\r\n            return questions[qIndex].answer == oIndex;\r\n         } else if (questions[qIndex].answer == oIndex) {\r\n            return true;\r\n         } else if (questions[qIndex].selected == oIndex) {\r\n            return false;\r\n         }\r\n      }\r\n      return undefined;\r\n   }\r\n\r\n   function renderScore(): React.ReactElement {\r\n      let icon: IconProp;\r\n      let message: string;\r\n\r\n      if (testScore != -1) {\r\n         if (testScore >= 0.8) {\r\n            icon = faSmileBeam;\r\n            message = 'Great job ' + username + '!!!';\r\n         } else if (testScore == 0.69) {\r\n            icon = faSmileWink;\r\n            message = 'Nice!';\r\n         } else if (testScore >= 0.6) {\r\n            icon = faSmile;\r\n            message = 'Nice!';\r\n         } else if (testScore >= 0.4) {\r\n            icon = faFrown;\r\n            message = 'Could be worse...';\r\n         } else {\r\n            icon = faSadTear;\r\n            message = \"Don't worry you'll succeed next time.\";\r\n         }\r\n\r\n         return (\r\n            <>\r\n               <h2>\r\n                  <FontAwesomeIcon icon={icon} />\r\n                  {' ' + text.toPercentage(testScore)}\r\n               </h2>\r\n               <p>{message}</p>\r\n            </>\r\n         );\r\n      }\r\n      return <p className=\"display-5\">Submit to see your results.</p>;\r\n   }\r\n\r\n   if (testDetails && questions) {\r\n      return (\r\n         <div className=\"container\">\r\n            <div className=\"p-1\">\r\n               <h2>{testDetails.title}</h2>\r\n               <p>{text.toParagraph(testDetails.description)}</p>\r\n               <form onSubmit={handleFormSubmit}>\r\n                  <fieldset name=\"test-field\" disabled={testScore != -1}>\r\n                     {testDetails.questions.map(\r\n                        (question: ITestQuestion, qIndex: number) => {\r\n                           const key = uuid();\r\n                           return (\r\n                              <fieldset key={key}>\r\n                                 <hr />\r\n                                 <h5>\r\n                                    {`${qIndex + 1}. ` + question.question}\r\n                                 </h5>\r\n                                 <p>{question.description}</p>\r\n                                 {question.options.map(\r\n                                    (option: string, oIndex: number) => {\r\n                                       return (\r\n                                          <Radio\r\n                                             key={uuid()}\r\n                                             name={key}\r\n                                             value={oIndex}\r\n                                             checked={\r\n                                                questions[qIndex].selected ==\r\n                                                oIndex\r\n                                             }\r\n                                             validation={handleValidation(\r\n                                                qIndex,\r\n                                                oIndex,\r\n                                             )}\r\n                                             onChange={(event) => {\r\n                                                questions[qIndex].selected =\r\n                                                   oIndex;\r\n                                                setQuestions([...questions]);\r\n                                             }}\r\n                                          >\r\n                                             <pre>\r\n                                                <code>{option}</code>\r\n                                             </pre>\r\n                                          </Radio>\r\n                                       );\r\n                                    },\r\n                                 )}\r\n                                 <div className=\"text-right\">\r\n                                    {question.hint ? (\r\n                                       <button\r\n                                          className=\"btn\"\r\n                                          onClick={(e) => {\r\n                                             e.currentTarget.innerText =\r\n                                                question.hint || '';\r\n                                             e.currentTarget.disabled = true;\r\n                                          }}\r\n                                       >\r\n                                          Help!\r\n                                       </button>\r\n                                    ) : (\r\n                                       ''\r\n                                    )}\r\n                                 </div>\r\n                              </fieldset>\r\n                           );\r\n                        },\r\n                     )}\r\n\r\n                     <hr />\r\n                     <div className=\"text-center\">\r\n                        <div\r\n                           id=\"test-results\"\r\n                           className=\"text-center my-5 py-5\"\r\n                        >\r\n                           {renderScore()}\r\n                           <input\r\n                              className=\"btn\"\r\n                              type=\"submit\"\r\n                              value=\"Submit test\"\r\n                           />\r\n                        </div>\r\n                     </div>\r\n                     <hr className=\"hide\" />\r\n                  </fieldset>\r\n               </form>\r\n            </div>\r\n         </div>\r\n      );\r\n   } else {\r\n      return (\r\n         <div className=\"dialog\">\r\n            <div className=\"text-center my-4\">Loading test...</div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Practice;\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { INDEX } from '../App';\r\n\r\nfunction Error(): React.ReactElement {\r\n   const navigator = useNavigate();\r\n\r\n   return (\r\n      <div className=\"dialog text-center\">\r\n         <div className=\"my-4 py-4\">\r\n            <h1>Oops!</h1>\r\n            <h4>Something went wrong!</h4>\r\n            <button className=\"btn m-1\" onClick={() => navigator(INDEX)}>\r\n               Go back to safety\r\n            </button>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Error;\r\n","import React, { useState, useEffect, createContext } from 'react';\nimport { Navigate, Route, Routes } from 'react-router';\n\nimport { initProgress } from '../data/progress';\n\nimport { storage } from '../component/Utilities';\nimport MainNav from '../component/MainNav';\nimport Footer from '../component/Footer';\n\nimport Login from '../page/Login';\nimport Home from '../page/Home';\nimport Learn from '../page/Learn';\nimport Practice from '../page/Practice';\nimport Error from '../page/Error';\n\nimport './App.css';\n\nexport const ID = 'com.homework.app';\nexport const VERSION = '0.2.0';\nexport const CONTENT = '0.2.0';\nexport const INDEX = '/homework/net';\nexport const ERROR = INDEX + '/error';\n\nexport const userContext = createContext<string>('');\n\n// Local storage entries\nconst APP_VER = 'version';\nconst CONTENT_VER = 'content';\nconst USERNAME = 'username';\n\nfunction App(): React.ReactElement {\n   const [username, setUser] = useState<string>(storage.get(USERNAME));\n\n   useEffect((): void => {\n      if (storage.get(APP_VER) != VERSION) {\n         storage.set(APP_VER, VERSION);\n      }\n\n      if (storage.get(CONTENT_VER) != CONTENT) {\n         storage.set(CONTENT_VER, CONTENT);\n         initProgress();\n      }\n   }, []);\n\n   function handleLogin(newUsername: string): void {\n      if (newUsername && newUsername !== username) {\n         storage.set(USERNAME, newUsername);\n         setUser(newUsername);\n      }\n   }\n\n   if (username) {\n      return (\n         <div className=\"app\">\n            <userContext.Provider value={username}>\n               <div>\n                  <MainNav />\n               </div>\n               <Routes>\n                  <Route path={INDEX + '/learn/:id'} element={<Learn />} />\n                  <Route\n                     path={INDEX + '/practice/:id'}\n                     element={<Practice />}\n                  />\n                  <Route path={INDEX} element={<Home />} />\n                  <Route path={INDEX + '/error'} element={<Error />} />\n                  <Route path=\"/\" element={<Navigate to={INDEX} />} />\n                  <Route path=\"*\" element={<Navigate to={ERROR} />} />\n               </Routes>\n               <Footer />\n            </userContext.Provider>\n         </div>\n      );\n   } else {\n      return (\n         <div className=\"app\">\n            <Login onLogin={handleLogin} />\n            <Footer />\n         </div>\n      );\n   }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <BrowserRouter>\r\n         <App />\r\n      </BrowserRouter>\r\n   </React.StrictMode>,\r\n   document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}