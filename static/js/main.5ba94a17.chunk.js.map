{"version":3,"sources":["component/Utilities.tsx","data/courses.tsx","component/MainNavbar.tsx","component/Footer.tsx","page/Login.tsx","page/Home.tsx","component/ScoreMeter.tsx","page/Learn.tsx","page/Practice.tsx","page/Error.tsx","App/App.tsx","index.tsx"],"names":["storage","key","window","localStorage","getItem","ID","value","setItem","text","number","Math","floor","split","map","line","uuid","PROGRESS","courses","id","category","name","title","description","sections","example","tests","topics","questions","question","options","answer","hint","updateScore","newScore","rawProgress","progress","JSON","parse","filter","score","stringify","getProgressSummery","data","getProgress","progressSummery","forEach","item","scoreIndex","findIndex","push","scores","avgSummery","avgScore","reduce","total","curr","length","overall","MainNavbar","Navbar","bg","expand","style","gridRow","Container","Brand","as","Link","to","INDEX","className","icon","faGraduationCap","Toggle","Collapse","Nav","NavDropdown","course","Item","test","Footer","date","Date","getFullYear","href","faGithub","Login","onLogin","useState","inputName","setInputName","width","faUserCircle","size","Form","onSubmit","event","preventDefault","displayName","charAt","toUpperCase","slice","toLowerCase","Group","Control","type","placeholder","onChange","currentTarget","Button","variant","Home","user","useContext","userContext","renderPanel","content","renderListItem","path","info","props","action","badge","Badge","React","createElement","ListGroup","faChalkboardTeacher","undefined","faBookReader","faUserEdit","ICONS","faSadTear","faFrown","faSmile","faSmileBeam","ScoreMeter","courseIndex","index","onClick","Learn","params","useParams","useEffect","SyntaxHighlighter","registerLanguage","csharp","highlightAll","section","Practice","username","navigate","useNavigate","setTest","setQuestions","setOptions","testScore","setTestScore","testIndex","qs","os","q","i","checked","target","classList","add","element","topic","disabled","qIndex","option","oIndex","Check","label","newOptions","o","Number","handleCheckChange","e","innerText","message","faSmileWink","renderScore","Error","navigator","VERSION","CONTENT","createContext","APP_VER","CONTENT_VER","USERNAME","App","setUser","fillerProgress","indexOf","newProgress","initProgress","Provider","newUsername","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ba94a17.chunk.js","sourcesContent":["import React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { ID } from '../App';\r\n\r\nexport const storage = {\r\n   get: function (key: string): string {\r\n      return window.localStorage.getItem(ID + '.' + key) || '';\r\n   },\r\n   set: function (key: string, value: string): void {\r\n      window.localStorage.setItem(ID + '.' + key, value);\r\n   },\r\n};\r\n\r\nexport const text = {\r\n   toPercentage: function (number: number) {\r\n      return Math.floor(number * 100) + '%';\r\n   },\r\n   toParagraph: function (text: string): React.ReactElement[] {\r\n      const lines = text.split('\\n');\r\n      return lines.map((line) => {\r\n         return (\r\n            <span key={uuid()}>\r\n               {line}\r\n               <br />\r\n            </span>\r\n         );\r\n      });\r\n   },\r\n};\r\n","import { storage } from '../component/Utilities';\r\n\r\n// Local storage entries\r\nconst PROGRESS = 'progress';\r\n\r\n// Courses\r\n// '/learn/advanced_types';\r\n// '/learn/bitwise_operators';\r\n// '/learn/objects';\r\n\r\nexport interface ICourse {\r\n   id: string;\r\n   category: string;\r\n   name: string;\r\n   title: string;\r\n   description: string;\r\n   sections: ICourseSection[];\r\n}\r\n\r\nexport interface ICourseSection {\r\n   title: string;\r\n   description: string;\r\n   example?: string;\r\n}\r\n\r\nexport const courses = [\r\n   {\r\n      id: 'primitive-types',\r\n      category: 'Types',\r\n      name: 'Primitive types',\r\n      title: 'Primitive types',\r\n      description: `Primitive types are the most basic types.`,\r\n      sections: [\r\n         {\r\n            title: 'bool',\r\n            description: `bool(Boolean) is the smallest type, it has only 2 possible states: True or False.\r\n               Booleans are mainly used in comparison operations.`,\r\n            example: `// Declaration and usage\r\n   bool isOnline = true;\r\n\r\n   if (isOnline) {\r\n      Console.WriteLine(\"Connection established!\");\r\n   }`,\r\n         },\r\n         {\r\n            title: `int, float and double`,\r\n            description: `int(integer), float, and double are numerical types, they represent numbers.\r\n               Each one has it's use case, typically we want to use the smallest type possible.\r\n      \r\n               int is the smallest one, it can hold only whole numbers.\r\n               Mainly use for counting stuff, like days, age, number of objects, indexes, etc..\r\n      \r\n               float is in the middle, it can hold decimal numbers, it's much lighter than double but less accurate.\r\n               Mainly use for stuff that doesn't require great precision and simple math.\r\n               Input number MUST use one of this formats: 0f, 0.0f\r\n      \r\n               double is the largest one, it can hold decimal numbers, it's heavy but accurate.\r\n               Mainly use for stuff that requires great precision like balance and currency.`,\r\n            example: `// Declaration\r\n   int age = 30;\r\n   float distance = 450.562f;\r\n   double balance1 = 1115313.315134d; // the d at the end is optional`,\r\n         },\r\n         {\r\n            title: `char and string`,\r\n            description: `char and strings types used for representing letter or text.\r\n      \r\n               char can hold only 1 letter which make it the smaller one.\r\n               Mainly used for storing letters and symbols, useful when dealing with ASCII.\r\n               Input letter MUST use this format: 'x'\r\n               \r\n               string can hold from 1 letter to full sentences, it's much larger and it grow by the amount of text that it's storing.\r\n               Mainly used for text.\r\n               Input text MUST use this format: \"Text\"`,\r\n            example: `// Declaration\r\n   char theLetterB = 'B';\r\n   string message = \"Oh no we are out of milk!\";`,\r\n         },\r\n      ],\r\n   },\r\n   {\r\n      id: 'math-operators',\r\n      category: 'Operators',\r\n      name: 'Math operators',\r\n      title: 'Math operators',\r\n      description: `Math operators allow us to preform math operations.`,\r\n      sections: [\r\n         {\r\n            title: 'Basic math operators',\r\n            description: `Their soul purpose is to do basic math operations.`,\r\n            example: `// Usage\r\n   double result = 0;\r\n   \r\n   result = 5 + 10;\\t// result = 15\r\n   result = 5 - 10;\\t// result = -5\r\n   result = 5 * 10;\\t// result = 50\r\n   result = 5 / 10;\\t// result = 0.5\r\n   result = 5 % 10;\\t// result = 5`,\r\n         },\r\n         {\r\n            title: `Setter math operators`,\r\n            description: `Those operators work the same as the basic ones, the only different is that they use the variable value and then set the variable value to the result.\r\n            Essentially \"x += y\" is the same as \"x = x + y\".`,\r\n            example: `// Usage\r\n   double result = 10;\r\n   \r\n   result += 5;\\t\\t// result = 15\r\n   result -= 5;\\t\\t// result = 5\r\n   result *= 5;\\t\\t// result = 50\r\n   result /= 5;\\t\\t// result = 2\r\n   result %= 5;\\t\\t// result = 0`,\r\n         },\r\n         {\r\n            title: `Shortcut math operators`,\r\n            description: `There are shortcuts to save us some time and to help us with cleaner code.\r\n            The 2 main ones are \"++\" and \"--\" they are used to add or subtract 1 from from the givin variable and set its value to the result.\r\n            Essentially \"x++\" is the same as \"x = x + 1\".\r\n\r\n            In most cases we write them after the variable name like that: index++, in this case the returned value will be the original value before adding 1.\r\n            If we want to return the value after adding 1 we will write them before the variable name like that: ++index.\r\n            \r\n            Note: They will always add 1 even if the variable type is float or double.\r\n\r\n            Note: The can be chained but it's highly not recommended, you should use setter math operators instead.`,\r\n            example: `// Usage\r\n   int x = 0;\r\n   int result = 0;\r\n\r\n   result = x++\\t\\t// result = 0, x = 1\r\n   result = x--\\t\\t// result = 0, x = -1\r\n   result = ++x\\t\\t// result = 1, x = 1\r\n   result = --x\\t\\t// result = -1, x = -1\r\n   \r\n// Other types\r\n   double myDouble = 0.0\r\n   myDouble++\\t\\t// myDouble = 1.0\r\n\r\n   float myFloat = 0.0f\r\n   myFloat++\\t\\t// myFloat = 1.0f\r\n\r\n// Chaining\r\n   y = x++++\\t\\t// y = 0, x = 2, Use x+=2 instead!\r\n   y = x++++++\\t\\t// y = 0, x = 3, Use x+=3 instead!`,\r\n         },\r\n      ],\r\n   },\r\n   {\r\n      id: 'condition-operators',\r\n      category: 'Operators',\r\n      name: 'Condition operators',\r\n      title: 'Condition operators',\r\n      description: `Condition operators the values and return a bool.`,\r\n      sections: [\r\n         {\r\n            title: 'Basic condition operators',\r\n            description: `Those operators take 2 values and test them.\r\n            \r\n            \">\" and \"<\" Check if the value is greater than or less than.\r\n            \">=\" and \"<=\" Check if the value is greater than or less than or equal(same as \"==\").\r\n            \"==\" return true if both values are the same, else false.\r\n            \"!=\" return false if both values are the same, else true.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n// With numbers\r\n   result = 5 > 10;\\t\\t// result = false\r\n   result = 5 < 10;\\t\\t// result = true\r\n   result = 5 >= 10;\\t\\t// result = false\r\n   result = 5 <= 10;\\t\\t// result = true\r\n   result = 5 == 10;\\t\\t// result = false\r\n   result = 5 != 10;\\t\\t// result = true\r\n   \r\n// With text\r\n   result = \"Hello\" == \"World\";\\t// result = false\r\n   result = 'A' != 'B';\\t\\t// result = true`,\r\n         },\r\n         {\r\n            title: `&& operator`,\r\n            description: `The AND operator return true if BOTH conditions are true.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n   result = true && true;\\t// result = true\r\n   result = true && false;\\t// result = false\r\n   result = false && true;\\t// result = false\r\n   result = false && false;\\t// result = false`,\r\n         },\r\n         {\r\n            title: `|| operator`,\r\n            description: `The OR operator return true if ONE of the conditions is true.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n   result = true || true;\\t// result = true\r\n   result = true || false;\\t// result = true\r\n   result = false || true;\\t// result = true\r\n   result = false || false;\\t// result = false`,\r\n         },\r\n         {\r\n            title: `^^ operator`,\r\n            description: `The XOR operator return true if ONE of the conditions is true but NOT BOTH.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n   result = true ^^ true;\\t// result = true\r\n   result = true ^^ false;\\t// result = false\r\n   result = false ^^ true;\\t// result = false\r\n   result = false ^^ false;\\t// result = false`,\r\n         },\r\n         {\r\n            title: `! operator`,\r\n            description: `The NOT operator return true if the condition is false.`,\r\n            example: `// Usage\r\n   bool result = false;\r\n   \r\n   result = !true;\\t\\t// result = false\r\n   result = !false;\\t\\t// result = true`,\r\n         },\r\n      ],\r\n   },\r\n];\r\n\r\nexport function getCourseIndex(id: string) {\r\n   return courses.findIndex((course) => course.id === id);\r\n}\r\n\r\n// Tests\r\nexport interface ITest {\r\n   id: string;\r\n   category: string;\r\n   topics: string[];\r\n   name: string;\r\n   title: string;\r\n   description: string;\r\n   questions: ITestQuestion[];\r\n}\r\n\r\nexport interface ITestQuestion {\r\n   question: string;\r\n   description: string;\r\n   options: string[];\r\n   hint?: string;\r\n   answer: number;\r\n}\r\n\r\nexport const tests = [\r\n   {\r\n      id: 'variables-types',\r\n      category: 'Type',\r\n      topics: ['primitive-types'],\r\n      name: 'Variables declaration',\r\n      title: 'Variables declaration',\r\n      description:\r\n         'This practice test focus on variable declaration and primitive types.',\r\n      questions: [\r\n         {\r\n            question:\r\n               'Which variable declaration is most suited for counting whole apples?',\r\n            description: '',\r\n            options: [\r\n               'double apples = 3;',\r\n               'apples = 3;',\r\n               'int apples = 3;',\r\n               'apples = 3.0;',\r\n            ],\r\n            answer: 2,\r\n            hint: 'We want to declare a variable that store whole numbers.',\r\n         },\r\n         {\r\n            question:\r\n               'Which variable declaration is most suited for an account balance?',\r\n            description: '',\r\n            options: [\r\n               'balance = 32,163.51;',\r\n               'int balance = 32,163.51;',\r\n               'float balance = 32,163.51;',\r\n               'double balance = 32,163.51;',\r\n            ],\r\n            answer: 3,\r\n            hint: 'We want to declare a variable that can hold large decimal numbers.',\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type int?',\r\n            description: '',\r\n            options: [\r\n               'int dogs = 2;',\r\n               'int dogs = 2i;',\r\n               'int dogs = 2f;',\r\n               'int dogs = 2d;',\r\n            ],\r\n            answer: 0,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type float?',\r\n            description: '',\r\n            options: [\r\n               'float lengthInMeters = 2.0;',\r\n               'float lengthInMeters = 2.0i;',\r\n               'float lengthInMeters = 2.0f;',\r\n               'float lengthInMeters = 2.0d;',\r\n            ],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type double?',\r\n            description: '',\r\n            options: [\r\n               \"double coinValue = '0.00005649';\",\r\n               'double coinValue = 0.00005649i;',\r\n               'double coinValue = 0.00005649f;',\r\n               'double coinValue = 0.00005649d;',\r\n            ],\r\n            answer: 3,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type char?',\r\n            description: '',\r\n            options: [\r\n               'char letter = A;',\r\n               'char letter = \"A\";',\r\n               \"char letter = 'A';\",\r\n               'char letter = `A`;',\r\n            ],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is correct for type string?',\r\n            description: '',\r\n            options: [\r\n               'string msg = Hello world!;',\r\n               'string msg = \"Hello world!\";',\r\n               \"string msg = 'Hello world!';\",\r\n               'string msg = `Hello world!`;',\r\n            ],\r\n            answer: 1,\r\n         },\r\n         {\r\n            question: 'Which variable declaration is incorrect?',\r\n            description: '',\r\n            options: [\r\n               'string greeting = \"Welcome!\";',\r\n               \"char grade = 'C';\",\r\n               'int flightNumber = 526EB01;',\r\n               'double pie = 3.14;',\r\n            ],\r\n            answer: 2,\r\n            hint: 'Look at the values.',\r\n         },\r\n      ],\r\n   },\r\n   {\r\n      id: 'operators-usage',\r\n      category: 'Operators',\r\n      topics: ['math-operators', 'condition-operators'],\r\n      name: 'Operators',\r\n      title: 'Operators',\r\n      description: 'This practice test focus on math and condition operators.',\r\n      questions: [\r\n         {\r\n            question: 'Which statement will increase x by 5?',\r\n            description: '',\r\n            options: [\r\n               'double x = 5;',\r\n               'double x = x + 5;',\r\n               'double x = y + 5;',\r\n               'double x = +5;',\r\n            ],\r\n            answer: 1,\r\n         },\r\n         {\r\n            question: 'Which shortest statement will multiply x by 5?',\r\n            description: '',\r\n            options: [\r\n               'double x = 5;',\r\n               'double x = x * 5;',\r\n               'double x *= 5;',\r\n               'double x++++++++++;',\r\n            ],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question:\r\n               'Which statement will result in \"x = y + 1\" AND \"y = y + 1\"?',\r\n            description: '',\r\n            options: [\r\n               'double x = y;',\r\n               'double x = y + 1;',\r\n               'double x = y++;',\r\n               'double x = ++y;',\r\n            ],\r\n            answer: 3,\r\n            hint: 'We want to increase \"y\" by 1 and pass it to \"x\".',\r\n         },\r\n         {\r\n            question:\r\n               'Which statement will NOT give us the message \"Hello world\"?',\r\n            description: '',\r\n            options: [\r\n               'Console.WriteLine(\"Hello world\");',\r\n               'Console.WriteLine(\"Hello \" + \"world\");',\r\n               'Console.WriteLine(\"Hello\" + \" world\");',\r\n               'Console.WriteLine(\"Hello\" + \"world\");',\r\n            ],\r\n            answer: 3,\r\n            hint: 'Pay attention to the spaces.',\r\n         },\r\n         {\r\n            question:\r\n               'Which add operation will give us the message \"Hello world\"?',\r\n            description: '',\r\n            options: [\r\n               'Console.WriteLine(\"Hello world\");',\r\n               'Console.WriteLine(\"Hello\" + \"world\");',\r\n               'Console.WriteLine(\"Hello \" + \"world\");',\r\n               'Console.WriteLine(\"Hello \" + \" world\");',\r\n            ],\r\n            answer: 3,\r\n            hint: 'We need to use the + operator and pay attention to the spaces.',\r\n         },\r\n         {\r\n            question: 'Which statement is true?',\r\n            description: '',\r\n            options: ['true < false;', '5 > 10;', '5 != 10;', \"'A' == 'B';\"],\r\n            answer: 2,\r\n         },\r\n         {\r\n            question: 'Which statement is true?',\r\n            description: '',\r\n            options: [\r\n               'true && false;',\r\n               'false || false;',\r\n               'true ^^ true;',\r\n               '!false;',\r\n            ],\r\n            answer: 3,\r\n         },\r\n         {\r\n            question: 'Which statement is true?',\r\n            description: '',\r\n            options: [\r\n               'true != true',\r\n               'true == false',\r\n               'true != !true',\r\n               'false == !false',\r\n            ],\r\n            answer: 2,\r\n         },\r\n      ],\r\n   },\r\n];\r\n\r\nexport function getTestIndex(id: string) {\r\n   return tests.findIndex((test) => test.id === id);\r\n}\r\n\r\n// Score\r\nexport interface IScore {\r\n   id: string;\r\n   category: string;\r\n   value: number;\r\n}\r\n\r\nexport function initProgress() {\r\n   const rawProgress = storage.get(PROGRESS);\r\n   if (rawProgress) {\r\n      const progress = JSON.parse(rawProgress);\r\n      const fillerProgress = courses.map((course: ICourse) => {\r\n         const res = progress.indexOf((data: IScore) => {\r\n            return data.id == course.id;\r\n         });\r\n         if (res === -1) {\r\n            return {\r\n               id: course.id,\r\n               category: course.category,\r\n               value: 0,\r\n            };\r\n         }\r\n      });\r\n      const newProgress = [...progress, ...fillerProgress];\r\n      storage.set(PROGRESS, JSON.stringify(newProgress));\r\n   } else {\r\n      const newProgress = courses.map((course: ICourse) => {\r\n         return {\r\n            id: course.id,\r\n            category: course.category,\r\n            value: 0,\r\n         };\r\n      });\r\n      storage.set(PROGRESS, JSON.stringify(newProgress));\r\n   }\r\n}\r\n\r\nexport function updateScore(newScore: IScore) {\r\n   const rawProgress = storage.get(PROGRESS);\r\n   if (rawProgress) {\r\n      const progress = JSON.parse(rawProgress).filter((score: IScore) => {\r\n         return score.id != newScore.id;\r\n      });\r\n      storage.set(PROGRESS, JSON.stringify([...progress, newScore]));\r\n   } else {\r\n      storage.set(PROGRESS, JSON.stringify([newScore]));\r\n   }\r\n}\r\n\r\nexport function getProgress(): IScore[] {\r\n   const data = storage.get(PROGRESS);\r\n   return data ? JSON.parse(data) : [];\r\n}\r\n\r\nexport interface IScoreSummery {\r\n   category: string;\r\n   score: number;\r\n}\r\n\r\nexport function getProgressSummery(): IScoreSummery[] {\r\n   const progress = getProgress();\r\n   const progressSummery: { category: string; scores: number[] }[] = [];\r\n\r\n   progress.forEach((item: IScore) => {\r\n      const scoreIndex = progressSummery.findIndex(\r\n         (score) => score.category === item.category,\r\n      );\r\n\r\n      if (scoreIndex === -1) {\r\n         progressSummery.push({\r\n            category: item.category,\r\n            scores: [item.value],\r\n         });\r\n      } else {\r\n         progressSummery[scoreIndex].scores.push(item.value);\r\n      }\r\n   });\r\n\r\n   const avgSummery = progressSummery.map((item) => {\r\n      const avgScore =\r\n         item.scores.reduce((total, curr) => total + curr) / item.scores.length;\r\n      return { category: item.category, score: avgScore };\r\n   });\r\n\r\n   let overall = 0;\r\n   avgSummery.forEach((item) => {\r\n      overall += item.score;\r\n   });\r\n\r\n   overall = overall / avgSummery.length;\r\n\r\n   return [{ category: 'Overall', score: overall }, ...avgSummery];\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { courses, ICourse, ITest, tests } from '../data/courses';\r\n\r\nimport { INDEX } from '../App';\r\n\r\nimport { Navbar, Container, Nav, NavDropdown } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGraduationCap } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction MainNavbar(): React.ReactElement {\r\n   return (\r\n      <Navbar bg=\"light\" expand=\"md\" style={{ gridRow: 0 }}>\r\n         <Container>\r\n            <Navbar.Brand as={Link} to={INDEX}>\r\n               <h2 className=\"d-inline\">\r\n                  <FontAwesomeIcon icon={faGraduationCap} /> Homework\r\n               </h2>\r\n               <sup> .NET</sup>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse id=\"main-navbar\">\r\n               <Nav>\r\n                  <NavDropdown title=\"Learn\" id=\"learn-dropdown\">\r\n                     {courses.map((course: ICourse) => {\r\n                        return (\r\n                           <NavDropdown.Item\r\n                              key={uuid()}\r\n                              as={Link}\r\n                              to={INDEX + '/learn/' + course.id}\r\n                           >\r\n                              {course.name}\r\n                           </NavDropdown.Item>\r\n                        );\r\n                     })}\r\n                  </NavDropdown>\r\n                  <NavDropdown title=\"Practice\" id=\"practice-dropdown\">\r\n                     {tests.map((test: ITest) => {\r\n                        return (\r\n                           <NavDropdown.Item\r\n                              key={uuid()}\r\n                              as={Link}\r\n                              to={INDEX + '/practice/' + test.id}\r\n                           >\r\n                              {test.name}\r\n                           </NavDropdown.Item>\r\n                        );\r\n                     })}\r\n                  </NavDropdown>\r\n               </Nav>\r\n            </Navbar.Collapse>\r\n         </Container>\r\n      </Navbar>\r\n   );\r\n}\r\n\r\nexport default MainNavbar;\r\n","import React from 'react';\r\n\r\nimport { Container } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction Footer(): React.ReactElement {\r\n   const date = new Date();\r\n   return (\r\n      <footer className=\"bg-light py-4 text-muted\" style={{ gridRow: 99 }}>\r\n         <Container className=\"d-flex justify-content-between\">\r\n            <span>\r\n               <small>Barak Attias</small> &copy;{' '}\r\n               <small>2021-{date.getFullYear()}</small>\r\n            </span>\r\n            <span>\r\n               <small>\r\n                  <a href=\"mailto:attias.barak@gmail.com\">\r\n                     attias.barak@gmail.com\r\n                  </a>{' '}\r\n                  | <a href=\"https://github.com/StrykeDev\">StrykeDev</a>{' '}\r\n                  <FontAwesomeIcon icon={faGithub} /> GitHub{' '}\r\n               </small>\r\n            </span>\r\n         </Container>\r\n      </footer>\r\n   );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface ILoginProps {\r\n   onLogin: (username: string) => void;\r\n}\r\n\r\nfunction Login({ onLogin }: ILoginProps): React.ReactElement {\r\n   const [inputName, setInputName] = useState('');\r\n\r\n   function handleRegister(event: React.FormEvent): void {\r\n      event.preventDefault();\r\n\r\n      if (inputName) {\r\n         const name = inputName.split(' ')[0];\r\n         const displayName =\r\n            name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\r\n         onLogin(displayName);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <Container className=\"my-5 text-center\">\r\n         <div className=\"my-5 py-5\">\r\n            <h1 className=\"display-4\">Welcome to Homework!</h1>\r\n            <h4>Lets get started.</h4>\r\n         </div>\r\n         <div\r\n            className=\"bg-light rounded p-2 d-inline-block\"\r\n            style={{ width: '25em' }}\r\n         >\r\n            <FontAwesomeIcon icon={faUserCircle} size=\"10x\" className=\"my-4\" />\r\n            <Form onSubmit={handleRegister} className=\"m-2 d-grid gap-2 \">\r\n               <Form.Group>\r\n                  <Form.Control\r\n                     type=\"text\"\r\n                     placeholder=\"What are we going to call you?\"\r\n                     value={inputName}\r\n                     onChange={(event) =>\r\n                        setInputName(event.currentTarget.value)\r\n                     }\r\n                  />\r\n               </Form.Group>\r\n               <Button variant=\"primary\" type=\"submit\">\r\n                  Start learning\r\n               </Button>\r\n            </Form>\r\n         </div>\r\n      </Container>\r\n   );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { INDEX, userContext } from '../App';\r\n\r\nimport { text } from '../component/Utilities';\r\n\r\nimport {\r\n   courses,\r\n   getProgressSummery,\r\n   ICourse,\r\n   IScoreSummery,\r\n   ITest,\r\n   tests,\r\n} from '../data/courses';\r\n\r\nimport { Badge, Container, ListGroup } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n   faBookReader,\r\n   faChalkboardTeacher,\r\n   faUserEdit,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Home(): React.ReactElement {\r\n   const user = useContext(userContext);\r\n\r\n   function renderPanel(\r\n      icon: IconProp,\r\n      title: string,\r\n      content: React.ReactElement,\r\n   ): React.ReactElement {\r\n      return (\r\n         <div className=\"bg-light col-lg rounded m-3\">\r\n            <div className=\"text-center pb-2 pt-4\">\r\n               <FontAwesomeIcon icon={icon} size=\"3x\" className=\"m-2\" />\r\n               <h5>{title}</h5>\r\n            </div>\r\n            {content}\r\n         </div>\r\n      );\r\n   }\r\n\r\n   function renderListItem(\r\n      name: string,\r\n      path = '',\r\n      info = -1,\r\n   ): React.ReactElement {\r\n      let props: any = {\r\n         key: uuid(),\r\n         className: 'p-1 d-flex justify-content-between align-items-center',\r\n      };\r\n\r\n      if (path) {\r\n         props = { ...props, action: true, as: Link, to: path };\r\n      }\r\n\r\n      if (info != -1) {\r\n         const badge = <Badge bg=\"dark\">{text.toPercentage(info)}</Badge>;\r\n         return React.createElement(ListGroup.Item, props, name, badge);\r\n      } else {\r\n         return React.createElement(ListGroup.Item, props, name);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <Container>\r\n         {/* Header */}\r\n         <div className=\"text-center px-2 p-5\">\r\n            <h1 className=\"display-4\">Hi {user}</h1>\r\n            <h4>What are we doing today?</h4>\r\n         </div>\r\n\r\n         <div className=\"row\">\r\n            {renderPanel(\r\n               faChalkboardTeacher,\r\n               'Progress',\r\n               <ListGroup className=\"pb-2\">\r\n                  {getProgressSummery().map((item: IScoreSummery) => {\r\n                     return renderListItem(\r\n                        item.category,\r\n                        undefined,\r\n                        item.score,\r\n                     );\r\n                  })}\r\n               </ListGroup>,\r\n            )}\r\n\r\n            {renderPanel(\r\n               faBookReader,\r\n               'Learn',\r\n               <ListGroup className=\"pb-2\">\r\n                  {courses.map((course: ICourse) => {\r\n                     return renderListItem(\r\n                        course.name,\r\n                        INDEX + '/learn/' + course.id,\r\n                     );\r\n                  })}\r\n               </ListGroup>,\r\n            )}\r\n\r\n            {renderPanel(\r\n               faUserEdit,\r\n               'Practice',\r\n               <ListGroup className=\"pb-2\">\r\n                  {tests.map((test: ITest) => {\r\n                     return renderListItem(\r\n                        test.name,\r\n                        INDEX + '/practice/' + test.id,\r\n                     );\r\n                  })}\r\n               </ListGroup>,\r\n            )}\r\n         </div>\r\n      </Container>\r\n   );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { courses, updateScore } from '../data/courses';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n   faSadTear,\r\n   faFrown,\r\n   faSmile,\r\n   faSmileBeam,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ICONS = [faSadTear, faFrown, faSmile, faSmileBeam];\r\n\r\ninterface IScoreMeterProps {\r\n   courseIndex: number;\r\n}\r\n\r\nfunction ScoreMeter({ courseIndex }: IScoreMeterProps): React.ReactElement {\r\n   function handleScoreSelected(value: number): void {\r\n      if (value >= 0 && value <= 1) {\r\n         const newScore = {\r\n            id: courses[courseIndex].id,\r\n            category: courses[courseIndex].category,\r\n            value: value,\r\n         };\r\n         updateScore(newScore);\r\n      }\r\n   }\r\n\r\n   function renderButtons(): React.ReactElement[] {\r\n      const buttons = ICONS.map((icon: IconProp, index: number) => {\r\n         return (\r\n            <Button\r\n               key={uuid()}\r\n               variant=\"none\"\r\n               type=\"button\"\r\n               onClick={() => handleScoreSelected((index + 1) / ICONS.length)}\r\n            >\r\n               <FontAwesomeIcon icon={icon} size=\"3x\" />\r\n            </Button>\r\n         );\r\n      });\r\n      return buttons;\r\n   }\r\n\r\n   return (\r\n      <Form>\r\n         <Form.Group className=\"d-inline-flex\">{renderButtons()}</Form.Group>\r\n      </Form>\r\n   );\r\n}\r\n\r\nexport default ScoreMeter;\r\n","import React, { useEffect } from 'react';\r\nimport { Navigate, useParams } from 'react-router';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { courses, getCourseIndex, ICourseSection } from '../data/courses';\r\n\r\nimport ScoreMeter from '../component/ScoreMeter';\r\n\r\nimport { text } from '../component/Utilities';\r\n\r\nimport { Container } from 'react-bootstrap';\r\nimport SyntaxHighlighter from 'highlight.js/lib/core';\r\nimport csharp from 'highlight.js/lib/languages/csharp';\r\nimport 'highlight.js/styles/github.css';\r\n\r\nfunction Learn(): React.ReactElement {\r\n   const params = useParams();\r\n\r\n   useEffect(() => {\r\n      SyntaxHighlighter.registerLanguage('cs', csharp);\r\n      SyntaxHighlighter.highlightAll();\r\n   }, [params]);\r\n\r\n   if (params.id) {\r\n      const courseIndex = getCourseIndex(params.id);\r\n      if (courseIndex != -1) {\r\n         return (\r\n            <Container className=\"py-4\" key={uuid()}>\r\n               <h1 className=\"display-4\">{courses[courseIndex].title}</h1>\r\n               <p>{text.toParagraph(courses[courseIndex].description)}</p>\r\n               {courses[courseIndex].sections.map((section: ICourseSection) => {\r\n                  return (\r\n                     <section key={uuid()}>\r\n                        <hr />\r\n                        <h4>{section.title}</h4>\r\n                        <p>{text.toParagraph(section.description)}</p>\r\n\r\n                        {section.example ? (\r\n                           <pre>\r\n                              <code className=\"bg-light rounded p-2 language-cs\">\r\n                                 {section.example}\r\n                              </code>\r\n                           </pre>\r\n                        ) : (\r\n                           ''\r\n                        )}\r\n                     </section>\r\n                  );\r\n               })}\r\n\r\n               <hr />\r\n               <div className=\"py-4 text-center\">\r\n                  <h4>How are we doing?</h4>\r\n                  <ScoreMeter courseIndex={courseIndex} />\r\n               </div>\r\n            </Container>\r\n         );\r\n      }\r\n   }\r\n   return <Navigate to=\"/\" />;\r\n}\r\n\r\nexport default Learn;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport {\r\n   tests,\r\n   getTestIndex,\r\n   ITestQuestion,\r\n   ITest,\r\n   updateScore,\r\n} from '../data/courses';\r\n\r\nimport { text } from '../component/Utilities';\r\n\r\nimport { Container, Button, Form } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n   faSadTear,\r\n   faFrown,\r\n   faSmile,\r\n   faSmileWink,\r\n   faSmileBeam,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { userContext } from '../App/App';\r\n\r\nfunction Practice(): React.ReactElement {\r\n   const username = useContext(userContext);\r\n   const navigate = useNavigate();\r\n   const params = useParams();\r\n   const [test, setTest] = useState<ITest>();\r\n   const [questions, setQuestions] = useState<[string, number][]>([]);\r\n   const [options, setOptions] = useState<[string, number][]>([]);\r\n   const [testScore, setTestScore] = useState(-1);\r\n\r\n   useEffect((): void => {\r\n      if (!params.id) {\r\n         navigate('/');\r\n         return;\r\n      }\r\n\r\n      const testIndex = getTestIndex(params.id);\r\n      if (testIndex != -1) {\r\n         const qs: [string, number][] = [];\r\n         const os: [string, number][] = [];\r\n         tests[testIndex].questions.forEach((q: ITestQuestion) => {\r\n            const key = uuid();\r\n            qs.push([key, q.answer]);\r\n            os.push([key, -1]);\r\n         });\r\n         setQuestions(qs);\r\n         setOptions(os);\r\n         setTest(tests[testIndex]);\r\n      } else {\r\n         navigate('/');\r\n         return;\r\n      }\r\n   }, [params]);\r\n\r\n   function renderScore(): React.ReactElement {\r\n      let icon: IconProp;\r\n      let message: string;\r\n\r\n      if (testScore != -1) {\r\n         if (testScore >= 0.8) {\r\n            icon = faSmileBeam;\r\n            message = 'Great job ' + username + '!!!';\r\n         } else if (testScore == 0.69) {\r\n            icon = faSmileWink;\r\n            message = 'Nice!';\r\n         } else if (testScore >= 0.6) {\r\n            icon = faSmile;\r\n            message = 'Nice!';\r\n         } else if (testScore >= 0.4) {\r\n            icon = faFrown;\r\n            message = 'Could be worse...';\r\n         } else {\r\n            icon = faSadTear;\r\n            message = \"Don't worry you'll succeed next time.\";\r\n         }\r\n\r\n         return (\r\n            <>\r\n               <h1 className=\"display-4\">\r\n                  <FontAwesomeIcon icon={icon} />\r\n                  {' ' + text.toPercentage(testScore)}\r\n               </h1>\r\n               <p>{message}</p>\r\n            </>\r\n         );\r\n      }\r\n      return <p className=\"display-5\">Submit to see your results.</p>;\r\n   }\r\n\r\n   function handleCheckChange(event: any, qIndex: number): void {\r\n      const newOptions: [string, number][] = options;\r\n      const o: [string, number] = [\r\n         event.currentTarget.name,\r\n         Number(event.currentTarget.value),\r\n      ];\r\n      newOptions[qIndex] = o;\r\n      setOptions([...newOptions]);\r\n   }\r\n\r\n   function handleFormSubmit(event: any): void {\r\n      event.preventDefault();\r\n\r\n      let score = 0;\r\n      questions.forEach(([key, value], i) => {\r\n         const checked = event.target[key].value;\r\n\r\n         if (checked != '' && checked == value) {\r\n            event.target[key][checked].classList.add('bg-success');\r\n            score++;\r\n         } else if (checked != '') {\r\n            event.target[key][checked].classList.add('bg-danger');\r\n            event.target[key][value].classList.add('bg-success');\r\n         } else {\r\n            event.target[key].forEach((element: any) => {\r\n               element.classList.add('bg-danger');\r\n            });\r\n         }\r\n      });\r\n\r\n      score /= questions.length;\r\n      setTestScore(score);\r\n\r\n      if (score > 0) {\r\n         test?.topics.forEach((topic) => {\r\n            updateScore({ id: topic, category: test.category, value: score });\r\n         });\r\n      }\r\n   }\r\n\r\n   if (test) {\r\n      return (\r\n         <Container className=\"py-4\">\r\n            <h1 className=\"display-4\">{test.title}</h1>\r\n            <p>{text.toParagraph(test.description)}</p>\r\n            <Form onSubmit={handleFormSubmit}>\r\n               <fieldset name=\"test-field\" disabled={testScore != -1}>\r\n                  {test.questions.map(\r\n                     (question: ITestQuestion, qIndex: number) => {\r\n                        const key = questions[qIndex][0];\r\n                        return (\r\n                           <fieldset key={key}>\r\n                              <hr />\r\n                              <h5>{`${qIndex + 1}. ` + question.question}</h5>\r\n                              <p>{question.description}</p>\r\n                              {question.options.map(\r\n                                 (option: string, oIndex: number) => {\r\n                                    return (\r\n                                       <Form.Check\r\n                                          key={key + oIndex}\r\n                                          name={key}\r\n                                          type=\"radio\"\r\n                                          value={oIndex}\r\n                                          checked={options[qIndex][1] == oIndex}\r\n                                          label={\r\n                                             <pre>\r\n                                                <code className=\"p-0 px-2\">\r\n                                                   {option}\r\n                                                </code>\r\n                                             </pre>\r\n                                          }\r\n                                          onChange={(event) =>\r\n                                             handleCheckChange(event, qIndex)\r\n                                          }\r\n                                       />\r\n                                    );\r\n                                 },\r\n                              )}\r\n                              <div className=\"text-right\">\r\n                                 {question.hint ? (\r\n                                    <Button\r\n                                       size=\"sm\"\r\n                                       variant=\"outline-primary\"\r\n                                       onClick={(e) => {\r\n                                          e.currentTarget.innerText =\r\n                                             question.hint || '';\r\n                                          e.currentTarget.disabled = true;\r\n                                       }}\r\n                                    >\r\n                                       Help!\r\n                                    </Button>\r\n                                 ) : (\r\n                                    ''\r\n                                 )}\r\n                              </div>\r\n                           </fieldset>\r\n                        );\r\n                     },\r\n                  )}\r\n\r\n                  <hr />\r\n                  <div className=\"text-center\">\r\n                     <div id=\"test-results\" className=\"text-center my-5 py-5\">\r\n                        {renderScore()}\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                           Submit test\r\n                        </Button>\r\n                     </div>\r\n                  </div>\r\n               </fieldset>\r\n            </Form>\r\n         </Container>\r\n      );\r\n   } else {\r\n      return <></>;\r\n   }\r\n}\r\n\r\nexport default Practice;\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { INDEX } from '../App/App';\r\n\r\nimport { Container, Button } from 'react-bootstrap';\r\n\r\nfunction Error(): React.ReactElement {\r\n   const navigator = useNavigate();\r\n\r\n   return (\r\n      <Container className=\"my-5 text-center\">\r\n         <div className=\"py-5\">\r\n            <h1 className=\"display-4\">Oops!</h1>\r\n            <h4>Something went wrong!</h4>\r\n            <Button\r\n               className=\"mt-4\"\r\n               variant=\"outline-primary\"\r\n               onClick={() => navigator(INDEX)}\r\n            >\r\n               Go back to safety\r\n            </Button>\r\n         </div>\r\n      </Container>\r\n   );\r\n}\r\n\r\nexport default Error;\r\n","import React, { useState, useEffect, createContext } from 'react';\nimport { Navigate, Route, Routes } from 'react-router';\n\nimport { initProgress } from '../data/courses';\n\nimport { storage } from '../component/Utilities';\n\nimport MainNavbar from '../component/MainNavbar';\nimport Footer from '../component/Footer';\n\nimport Login from '../page/Login';\nimport Home from '../page/Home';\nimport Learn from '../page/Learn';\nimport Practice from '../page/Practice';\nimport Error from '../page/Error';\n\nimport './App.css';\n\nexport const ID = 'com.homework.app';\nexport const VERSION = '0.1.1';\nexport const CONTENT = '0.1.1';\nexport const INDEX = '/homework';\n\nexport const userContext = createContext<string>('');\n\n// Local storage entries\nconst APP_VER = 'version';\nconst CONTENT_VER = 'content';\nconst USERNAME = 'username';\n\nfunction App(): React.ReactElement {\n   const [username, setUser] = useState<string>(storage.get(USERNAME));\n\n   useEffect((): void => {\n      if (storage.get(APP_VER) != VERSION) {\n         storage.set(APP_VER, VERSION);\n      }\n\n      if (storage.get(CONTENT_VER) != CONTENT) {\n         storage.set(CONTENT_VER, CONTENT);\n         initProgress();\n      }\n   }, []);\n\n   function handleLogin(newUsername: string): void {\n      if (newUsername && newUsername !== username) {\n         storage.set(USERNAME, newUsername);\n         setUser(newUsername);\n      }\n   }\n\n   if (username) {\n      return (\n         <div className=\"app\">\n            <userContext.Provider value={username}>\n               <MainNavbar />\n               <Routes>\n                  <Route path={INDEX + '/learn/:id'} element={<Learn />} />\n                  <Route\n                     path={INDEX + '/practice/:id'}\n                     element={<Practice />}\n                  />\n                  <Route path={INDEX} element={<Home />} />\n                  <Route path={INDEX + '/error'} element={<Error />} />\n                  <Route\n                     path=\"*\"\n                     element={<Navigate to={INDEX + '/error'} />}\n                  />\n               </Routes>\n               <Footer />\n            </userContext.Provider>\n         </div>\n      );\n   } else {\n      return (\n         <div className=\"app\">\n            <Login onLogin={handleLogin} />\n            <Footer />\n         </div>\n      );\n   }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <BrowserRouter>\n         <App />\n      </BrowserRouter>\n   </React.StrictMode>,\n   document.getElementById('root'),\n);\n"],"sourceRoot":""}